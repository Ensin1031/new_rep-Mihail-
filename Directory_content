import tkinter as tk
from os import path, fspath, listdir
from datetime import datetime
from functools import partial


class Main_dir(tk.Frame):
    # Класс получения содержимого директории
    def __init__(self, root):
        super().__init__(root)
        self.__init_window()

    @staticmethod
    def __color_event_bg(widget, color, event):
        # функция изменения цвета поля по событию
        event.widget.config(bg=color)

    def __on_mousewheel(self, event):
        # функция прокрутки окна результата колесом мыши
        self.canvas.yview_scroll(-1 * int(event.delta / 120), "units")
        return 'break'

    def __way_to_directory(self, way):
        # Проверка корректного ввода пути к директории, dict на выходе (имя:путь)
        while True:
            list_dir_all = []
            list_dir, list_file = {}, {}
            if not path.isdir(fspath(way)):
                self.lable_exit.configure(text='Введите корректный путь к директории', font='Arial 16')
                break
            if way:
                list_dir_all = listdir(path=way)
                self.lable_exit.configure(text='Содержимое директории:', font='Arial 14')

            for index, value in enumerate(list_dir_all):
                way_value = fspath(way + '/' + str(value))
                if path.isdir(fspath(way_value)):
                    list_dir[list_dir_all[index]] = way_value
                if path.isfile(fspath(way_value)):
                    list_file[list_dir_all[index]] = way_value
            break

        return list((list_dir, list_file))

    def __output_str(self, way):
        # итоговые str на вывод
        if len(way[0]) > 0:
            name_frame = tk.Frame(self.frame_str, width=785, height=21)
            name_frame.pack()
            tk.Label(name_frame, font='Tahoma 9', text='Название').place(relx=0.01, rely=0)
            tk.Label(name_frame, font='Tahoma 9', text='Размер').place(relx=0.6, rely=0)
            tk.Label(name_frame, font='Tahoma 9', text='Дата последнего изменения').place(relx=0.97, rely=0, anchor='ne')

        for value in way[0]:
            self.frame = tk.Frame(self.frame_str, width=785, height=21)
            way_to_dir = way[0][value]
            self.ln = tk.Label(self.frame, font='Tahoma 9', text=value)
            self.ls = tk.Label(self.frame, font='Tahoma 9', text='    [                 ]    ')
            self.ld = tk.Label(self.frame, font='Tahoma 9',
                               text=(datetime.fromtimestamp(path.getmtime(way_to_dir)).strftime('%d.%m.%Y %H:%M:%S')))

            self.frame.pack()
            self.ln.place(relx=0.01, rely=0)
            self.ls.place(relx=0.75, rely=0, anchor='ne')
            self.ld.place(relx=0.97, rely=0, anchor='ne')

        for value in way[1]:
            self.frame = tk.Frame(self.frame_str, width=785, height=21)
            way_to_file = way[1][value]
            self.ln = tk.Label(self.frame, font='Tahoma 9', text=value)
            self.ls = tk.Label(self.frame, font='Tahoma 9',
                               text=(str(round((path.getsize(fspath(way_to_file)) / 1024), 2)) + ' Кбайт   '))
            self.ld = tk.Label(self.frame, font='Tahoma 9',
                               text=(datetime.fromtimestamp(path.getmtime(way_to_file)).strftime('%d.%m.%Y %H:%M:%S')))

            self.frame.pack()
            self.ln.place(relx=0.01, rely=0)
            self.ls.place(relx=0.75, rely=0, anchor='ne')
            self.ld.place(relx=0.97, rely=0, anchor='ne')

    def __output_list(self, event=False):
        # создание списка содержимого и его обработка
        way = self.__way_to_directory(self.entry_enter.get())

        result_frame_plase_list = self.result_frame.place_slaves()
        result_frame_pack_list = self.result_frame.pack_slaves()

        if len(result_frame_plase_list) > 0:
            for value in result_frame_plase_list:
                value.destroy()
        if len(result_frame_pack_list) > 0:
            for value in result_frame_pack_list:
                value.destroy()

        # высота фрейма
        height_scroll = (1 + len(way[0]) + len(way[1])) * 21

        # холст
        self.canvas = tk.Canvas(self.result_frame,
                           width=785,
                           height=420,
                           scrollregion=(0, 0, 785, height_scroll))

        if 1 < len(way[0]) + len(way[1]) <= 21:
            self.frame_str = tk.Frame(self.result_frame, width=785, height=430)

            self.__output_str(way)

            self.frame_str.pack()

        elif len(way[0]) + len(way[1]) > 21:
            # скроллбар
            sbar = tk.Scrollbar(self.result_frame, command=self.canvas.yview)
            self.canvas.config(yscrollcommand=sbar.set)
            self.canvas.bind_all("<MouseWheel>", self.__on_mousewheel)
            sbar.place(relx=1, rely=1, anchor='se', relheight=1)
            self.canvas.pack()

            # внутренние фреймы
            inner_frame = tk.Frame(self.canvas, width=785, height=height_scroll)
            self.canvas.create_window((0, 0), window=inner_frame, anchor=tk.NW)

            self.frame_str = tk.Frame(inner_frame, width=785, height=430)

            self.__output_str(way)

            self.frame_str.pack()

    def __init_window(self):
        # Основное окно
        root.geometry(f'800x600+{int(root.winfo_screenwidth() / 2 - 400)}+{int(root.winfo_screenheight() / 2 - 300)}')
        root.resizable(False, False)

        self.user_frame = tk.Frame(root, width=785, height=147).place(relx=0.01, rely=0.01)
        self.result_frame = tk.Frame(root, width=785, height=430)
        tk.Label(self.user_frame,
                 text='Выведите содержимое указанной Вами директории на экран:',
                 font='Arial 18'
                 ).place(relx=0.5, rely=0.01, anchor=tk.N)  # метка - заголовок
        tk.Label(self.user_frame,
                 text='Введите путь к нужной директории:',
                 font='Arial 14'
                 ).place(relx=0.45, rely=0.07, anchor='ne')  # метка - просим пользователя ввести путь
        self.entry_enter = tk.Entry(self.user_frame, font='Arial 14')  # поле ввода адреса директории
        self.result_button = tk.Button(self.user_frame, font='Arial 14', bg='#f0f0f0',
                                       text='Вывод содержимого', command=self.__output_list)  # кнопка вывода
        self.lable_exit = tk.Label(self.user_frame, font='Arial 12', text='')  # Предвариельная метка

        self.entry_enter.bind('<Return>', partial(self.__output_list))  # биндим поле на клавишу <Enter>
        self.result_button.bind('<Enter>', partial(self.__color_event_bg, self.result_button, '#B7EFF0'))
        self.result_button.bind('<Leave>', partial(self.__color_event_bg, self.result_button, '#f0f0f0'))

        self.entry_enter.place(relx=0.5, rely=0.07)
        self.result_button.place(relx=0.5, rely=0.16, anchor='center')
        self.lable_exit.place(relx=0.5, rely=0.23, anchor='center')

        self.result_frame.place(relx=0.01, rely=0.27)


if __name__ == '__main__':
    root = tk.Tk()
    root.title('Вывод содержимого указанной директории')
    result = Main_dir(root)
    root.mainloop()
